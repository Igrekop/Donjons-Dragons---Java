@startuml '[https://plantuml.com/sequence-diagram](https://plantuml.com/sequence-diagram)'

package races {
    class Races {
        - nom : String
        - bonusForce : int 
        - bonusDexterite : int 
        - bonusVitesse : int 
        - bonusPV : int
        - bonusInitiative : int
        + appliquerBonus(personnage : Personnage) 
        + getNom()
    }

    class Elfe {
        + Elfe()
    }

    class Halfelin {
        + Halfelin()
    }

    class Humain {
        + Humain()
    }

    class Nain {
        + Nain()
    }

    Races <|-- Elfe
    Races <|-- Halfelin
    Races <|-- Humain
    Races <|-- Nain
}

package personnages {
   abstract class Personnage {
            - nom : String
            - pointDeVie : int
            - force : int
            - dexterite : int
            - vitesse : int
            - initiative : int
            - equipementEquipe : Equipement[]
            + Personnage(nom: String, pointDeVie: int, force: int, dexterite: int, vitesse: int, initiative: int)
            + attaquer(cible: Monstre) : void
            + equiper(slot: int, equipement: Equipement) : void
            + equiper(equipement: Equipement, equipe: Object) : void
            + getEquiper() : List<Equipement>
            + toString() : String
            + getNom() : String
            + getPointDeVie() : int
            + getForce() : int
            + getDexterite() : int
            + getVitesse() : int
            + getInitiative() : int
            + setNom(nom : String) : void
            + setPointDeVie(pv : int) : void
            + addPdV(pv : int) : void
            + setForce(force : int) : void
            + setVitesse_change(vitesse : int) : void
            + setDexterite(dex : int) : void
            + setVitesse(vitesse : int) : void
            + setInitiative(initiative : int) : void
        }

    class Joueur {
            - Classe m_classe
            - Races m_race
            - ArrayList<Equipement> m_inventaire
            - int posX
            - int posY

            + Joueur(String nom, Classe classe, Races race)
            + void attaquer(Monstre cible)
            + void equiper(Equipement equipement, Object equipe)
            + void ajouterEquipement(Equipement equipement)
            + void afficherInventaire()
            + int getClasseArmureActuelle()
            + void setPosition(int x, int y)
            + void seDeplacer(String direction, map_milieu map)
            + void ramasserEquipement(map_milieu map)
            + String toString()
            + Classe getClasse()
            + Races getRace()
            + ArrayList<Equipement> getEquipements()
        }

    Personnage <|-- Joueur
    

}

package classes {
    abstract class Classe {
        - String nom
        - int pvDeBase
        - List<Equipement> equipements
        + Classe(String nom, int pvDeBase)
        + getNom(): String
        + getPvDeBase(): int
        + getEquipements(): List<Equipement>
        # genererEquipementDeBase()
        + toString(): String Override
    }

    class Clerc extends Classe {
        + Clerc()
        + genererEquipementDeBase() : void
        toString(): String Override
    }

    class Guerrier extends Classe {
        + Guerrier()
        + genererEquipementDeBase() : void
        toString(): String Override
    }

    class Magicien extends Classe {
        + Magicien()
        + genererEquipementDeBase() : void
        toString(): String Override
    }

    class Roublard extends Classe {
        + Roublard()
        + genererEquipementDeBase() : void
        toString(): String Override
    }

    Classe <|-- Clerc
    Classe <|-- Guerrier
    Classe <|-- Magicien
    Classe <|-- Roublard

    
}

package monstres {
    abstract class Monstre {
        - String espece
        - int numero
        - int pointDeVie
        - int force
        - int dexterite
        - int initiative
        - int classeArmure
        - String typeAttaque
        - int portee
        - String degats
        + Monstre(...)
        + attaquer(cible: Personnage)
        + toString(): String
    }

    class Squelette extends Monstre {
        + Squelette(numero: int)
        + attaquer(cible: Personnage): void
    }

    class Dragon extends Monstre {
        + Dragon(numero: int)
        + attaquer(cible: Personnage): void
    }

    class Gobelin extends Monstre {
        + Gobelin(numero: int)
        + attaquer(cible: Personnage): void
    }

    class Monstreperso extends Monstre {
        + Monstreperso(espece: int,numero: int,pointDeVie: int,force: int,dexterite: int,initiative: int,
                                classeArmure: int,typeAttaque: String,portee:int ,degats: int)
        + attaquer(cible: Personnage)
    }

    Monstre <|-- Squelette
    Monstre <|-- Dragon
    Monstre <|-- Gobelin
    Monstre <|-- Monstreperso
}

package equipements {
    interface Equipement {
        + getNom(): String
        + getType(): String
        + getModificateurVitesse(): int
        + getModificateurForce(): int
        + getPortee(): int
        + getDegats(): String
        + getClasseArmure(): int
        + estArme(): boolean
        + estArmure(): boolean

    }

    interface EquipementDeBase {
        + genererEquipementDeBase() : void
    }

    class GestionEquipements {
        + initialiserEquipements(): List<Equipement>
        + afficherEquipements(List<Equipement>): void
        + equiperPremiereArmeEtArmure(personnage: Personnage, equipements: List<Equipement>)
    }



    EquipementDeBase <|-- GestionEquipements


package Armes {
    abstract class Armes {
        - String nom
        - String degats
        - int portee
        - String type
        + Armes(String, String, int, String)
        + getNom(): String
        + getType(): String
        + getDegats(): String
        + getPortee(): int
        + getModificateurVitesse(): int
        + getModificateurForce(): int
    }

    class ArmeCourante {
        + ArmeCourante(nom: String, degats: String)
        + toString(): String
        + getClasseArmure(): int Override
    }

    class ArmeDistance {
        + ArmeDistance(nom: String, degats: String, portee: int)
        + toString(): String
        + getClasseArmure(): int Override
    }

    class ArmeDeGuerre {
        + ArmeDeGuerre(nom: String, degats: String)
        + getModificateurVitesse(): int Override
        + getModificateurForce(): int Override
        + getClasseArmure(): int Override
        + toString(): String
    }

    Armes <|-- ArmeCourante
    Armes <|-- ArmeDistance
    Armes <|-- ArmeDeGuerre
    Armes --> equipements.Equipement
}

package Armures {
    abstract class Armure {
        - String nom
        - int classeArmure
        - String type
        + Armure(String nom, int classeArmure, String type)
        + getNom(): String
        + getType(): String
        + getClasseArmure(): int Override
        + getModificateurVitesse(): int Override
        + getModificateurForce(): int Override
    }

    class ArmureLegere {
        + ArmureLegere(nom: String, classeArmure: int)
        + toString(): String Override
        + getPortee(): int Override
        + getDegats(): String Override
        + getClasseArmure(): int Override
    }

    class ArmureLourde {
        + ArmureLourde(nom: String, classeArmure: int)
        + getModificateurVitesse(): int «override»
        + getPortee(): int Override
        + getDegats(): String Override
        + toString(): String Override
        + getClasseArmure(): int Override
    }

    Armure <|-- ArmureLegere
    Armure <|-- ArmureLourde
    Armure --> equipements.Equipement
}
}

package Des {
class Des {
    - random : Random
    - DICE_FACES : String[]
    - lancerDes(nombreFaces: int, nombreDes: int): int
    - printDiceFace(num: int, faces: int): void
    + lancerDes(notation: String): int
    + lancerDesAvecAnimation(notation: String): void
    + main(args: String[]): void
}
}

package maitredujeux {
    class Maitredujeux {
        - lignes : ArrayList<String>
        - compteurMonstres : Map<String, Integer>
        - especesPerso : ArrayList<String>
        + Maitredujeux()
        + ajouterLignes(ligne: String) : void
        + afficherligne() : void
        + creemonstre() : Monstre
        + creemonstreperso() : Monstreperso
        - creerMonstreEspece(espece: String) : Monstre
        - saisirEntierPositif(message: String) : int
        - saisirEntierMin(message: String, min: int) : int
    }
}

package inter_face {

    class Barre_haut  {
            - static final String barre
            + void Affichage(Joueur J0, int donj, List<Object> participants, int tour)
            + void SAL(int nb)
        }

        class map_milieu {
            - Case[][] map
            - letters: String
            - rows: int
            - cols: int
            + initializeMap(): void
            + generateLetters(int cols): String
            + isValidPosition(int row, int col): boolean
            + map_milieu(int rows, int cols)
            + addObstacle(int row, int col): void
            + addEquipement(int row, int col, Equipement e): void
            + Affichage(List<Object> participants): void
        }

        class Inter_manag {
            + main(String[] args)
        }

        class Obstacle() {
            +toString()
        }

        class Case {
            - contenu : Object
            + getContenu(): Object
            + setContenu(Object contenu): void
            + estVide(): boolean
            + afficher(): String
        }



         Inter_manag --> Barre_haut
         Inter_manag --> map_milieu


}

Inter_manag --> Joueur
Inter_manag --> Maitredujeux
map_milieu --> Joueur
         map_milieu --> Monstre
         Barre_haut --> Joueur
         Barre_haut --> Monstre
Joueur --> equipements.Equipement
Joueur --> classes.Classe
Joueur --> races.Races
Races --> Personnage
Classe --> "0..*" equipements.Equipement : "utilise"
Classe --> equipements.GestionEquipements : "gère"
Maitredujeux --> Monstre : utilise
Maitredujeux --> Monstreperso : crée
Maitredujeux --> Gobelin : crée
Maitredujeux --> Dragon : crée
Maitredujeux --> Squelette : crée

@enduml
