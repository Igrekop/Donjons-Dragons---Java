@startuml '[https://plantuml.com/sequence-diagram](https://plantuml.com/sequence-diagram)'

package races {
    class Races {
        - nom : String
        - bonusForce : int 
        - bonusDexterite : int 
        - bonusVitesse : int 
        - bonusPV : int
        - bonusInitiative : int
        + appliquerBonus(personnage : Personnage) 
        + getNom()
    }

    class Elfe {
        + Elfe()
    }

    class Halfelin {
        + Halfelin()
    }

    class Humain {
        + Humain()
    }

    class Nain {
        + Nain()
    }

    Races <|-- Elfe
    Races <|-- Halfelin
    Races <|-- Humain
    Races <|-- Nain
}

package personnages {
    abstract class Personnage {
        - String nom
        - int pointDeVie
        - int force
        - int dexterite
        - int vitesse
        - int initiative
        + attaquer(Personnage cible)
        + toString(): String
    }

    class Joueur {
        - Classe classe
        - Races race
        + Joueur(String nom, Classe classe, Races race)
        + attaquer(Personnage cible)
        + toString(): String
        + getClasse(): Classe
        + getRace(): Races
    }

    Personnage <|-- Joueur
    

}

package classes {
    abstract class Classe {
        - String nom
        - int pvDeBase
        - List<Equipement> equipements
        + Classe(String nom, int pvDeBase)
        + getNom(): String
        + getPvDeBase(): int
        + getEquipements(): List<Equipement>
        # genererEquipementDeBase()
    }

    class Clerc {
        + Clerc()
        + genererEquipementDeBase() : void
    }

    class Guerrier {
        + Guerrier()
        + genererEquipementDeBase() : void
    }

    class Magicien {
        + Magicien()
        + genererEquipementDeBase() : void
    }

    class Roublard {
        + Roublard()
        + genererEquipementDeBase() : void
    }

    Classe <|-- Clerc
    Classe <|-- Guerrier
    Classe <|-- Magicien
    Classe <|-- Roublard
    
}

package monstres {
    abstract class Monstre {
        - String espece
        - int numero
        - int pointDeVie
        - int force
        - int dexterite
        - int initiative
        - int classeArmure
        - String typeAttaque
        - int portee
        - String degats
        + Monstre(...)
        + attaquer()
        + toString(): String
    }

    class Squelette {
        + Squelette(numero: int)
        + attaquer(): void
    }

    class Dragon {
        + Dragon(numero: int)
        + attaquer(): void
    }

    class Gobelin {
        + Gobelin(numero: int)
        + attaquer(): void
    }

    Monstre <|-- Squelette
    Monstre <|-- Dragon
    Monstre <|-- Gobelin
}

package equipements {
    interface Equipement {
        + getNom(): String
        + getType(): String
        + getModificateurVitesse(): int
        + getModificateurForce(): int
    }

    interface EquipementDeBase {
        + genererEquipementDeBase() : void
    }

    class GestionEquipements {
        + initialiserEquipements(): List<Equipement>
        + afficherEquipements(List<Equipement>): void
    }

    EquipementDeBase <|-- GestionEquipements


package Armes {
    abstract class Armes {
        - String nom
        - String degats
        - int portee
        - String type
        + Armes(String, String, int, String)
        + getNom(): String
        + getType(): String
        + getDegats(): String
        + getPortee(): int
        + getModificateurVitesse(): int
        + getModificateurForce(): int
    }

    class ArmeCourante {
        + ArmeCourante(nom: String, degats: String)
        + toString(): String
    }

    class ArmeDistance {
        + ArmeDistance(nom: String, degats: String, portee: int)
        + toString(): String
    }

    class ArmeDeGuerre {
        + ArmeDeGuerre(nom: String, degats: String)
        + getModificateurVitesse(): int
        + getModificateurForce(): int
        + toString(): String
    }

    Armes <|-- ArmeCourante
    Armes <|-- ArmeDistance
    Armes <|-- ArmeDeGuerre
    Armes --> equipements.Equipement
}

package Armures {
    abstract class Armure {
        - String nom
        - int classeArmure
        - String type
        + Armure(String nom, int classeArmure, String type)
        + getNom(): String
        + getType(): String
        + getClasseArmure(): int
        + getModificateurVitesse(): int
        + getModificateurForce(): int
    }

    class ArmureLegere {
        + ArmureLegere(nom: String, classeArmure: int)
        + toString(): String
    }

    class ArmureLourde {
        + ArmureLourde(nom: String, classeArmure: int)
        + getModificateurVitesse(): int
        + toString(): String
    }

    Armure <|-- ArmureLegere
    Armure <|-- ArmureLourde
    Armure --> equipements.Equipement
}
}

package inter_face {


    class Barre_haut  {
        -static final String barre
        +void Affichage(Joueur J0, int donj, List<Object> participants, int tour)
        +void SAL(int nb)
    }



    class map_milieu {
            - static  String letters
            - String[][] map
            - letters: String
            - rows: int
            - cols: int
            + initializeMap(): void
            + generateLetters(int cols): String
            + isValidPosition(int row, int col): boolean
            + map_milieu(int rows, int cols)
            + addObstacle(int row, int col): void
            + addEquipment(int row, int col): void
            + Affichage(List<Object> participants): void
        }

    class Inter_manag {
                +main(String[] args)
        }



         Inter_manag --> Barre_haut
         Inter_manag --> map_milieu


}

Inter_manag --> Joueur
Inter_manag --> Maitredujeux
map_milieu --> Joueur
         map_milieu --> Monstre
         Barre_haut --> Joueur
         Barre_haut --> Monstre
Joueur --> equipements.Equipement
Joueur --> classes.Classe
Joueur --> races.Races
classes.Classe --> equipements.EquipementDeBase
Races --> Personnage
Classe --> "0..*" equipements.Equipement : "utilise"
Classe --> equipements.GestionEquipements : "g√®re"

@enduml
